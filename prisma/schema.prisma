generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String   @id @default(uuid()) @db.Uuid
  role     Role     @default(STUDENT)
  isAdmin  Boolean  @default(false)
  updatedAt DateTime @default(now())

  student   Student?
  company   Company?
  interests UserInterest[]
}

model Student {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique @db.Uuid

  code     String   @unique
  name     String
  bio      String?
  year     String
  cv       String?
  linkedin String?
  github   String?
  avatar   String?

  actionCompletions ActionCompletion[]
  savedByCompanies  SavedStudent[]
}

model Company {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique @db.Uuid

  name     String   @unique
  tier     Tier
  avatar   String?

  savedStudents SavedStudent[]
}

model Action {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  points      Int
  altText     String?
  isLive      Boolean  @default(false)
  isVisible   Boolean  @default(true)

  actionCompletions ActionCompletion[]
}

model ActionCompletion {
  id          String   @id @default(uuid())
  completedAt DateTime @default(now())

  action       Action   @relation(fields: [actionId], references: [id])
  student      Student  @relation(fields: [studentCode], references: [code])

  actionId     String
  studentCode  String

  @@unique([actionId, studentCode])
}

model Interest {
  id     String  @id @default(uuid()) @db.Uuid
  name   String  @unique

  users  UserInterest[]
}

model UserInterest {
  user       User     @relation(fields: [userId], references: [id])
  interest   Interest @relation(fields: [interestId], references: [id])

  userId     String @db.Uuid
  interestId String @db.Uuid

  @@id([userId, interestId])
}

model SavedStudent {
  id        String   @id @default(uuid())
  student   Student  @relation(fields: [studentId], references: [id])
  savedBy   Company  @relation(fields: [savedById], references: [id])
  isSaved   Boolean  @default(false)
  createdAt DateTime @default(now())

  studentId String
  savedById String
}

enum Role {
  STUDENT
  COMPANY
}

enum Tier {
  DIAMOND
  GOLD
  SILVER
  BRONZE
}