generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  email               String               @unique
  password            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  role                Role                 @default(STUDENT)
  isAdmin             Boolean              @default(false)
  savedStudents       SavedStudent[]
  passwordResetTokens PasswordResetToken[]

  student   Student?
  company   Company?
  interests Interest[] @relation(fields: [interestId], references: [id])

  interestId String[] @db.ObjectId
}

model Action {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String
  points      Int
  altText     String?
  isLive      Boolean @default(false)
  isVisible   Boolean @default(true)

  ActionCompletion ActionCompletion[]
}

model ActionCompletion {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  completedAt DateTime @default(now())

  action  Action  @relation(fields: [actionId], references: [id])
  Student Student @relation(fields: [studentCode], references: [code])

  actionId    String @db.ObjectId
  studentCode String

  @@unique([actionId, studentCode])
}

model Student {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  user     User           @relation(fields: [userId], references: [id])
  code     String         @unique
  name     String
  bio      String?        @db.String
  year     String
  saves    SavedStudent[]
  cv       String?
  linkedin String?
  github   String?
  avatar   String?        @map("image")

  userId String @unique @db.ObjectId

  ActionCompletion ActionCompletion[]
}

model Company {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
  name   String  @unique
  tier   Tier
  avatar String? @map("image")

  userId String @unique @db.ObjectId
}

model Interest {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  UserIds String[] @db.ObjectId
  Users   User[]   @relation(fields: [UserIds], references: [id])
}

model SavedStudent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id])
  savedBy   User     @relation(fields: [savedById], references: [id])
  isSaved   Boolean  @default(false)
  createdAt DateTime @default(now())

  studentId String @db.ObjectId
  savedById String @db.ObjectId
}

model PasswordResetToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  token String @unique

  user User @relation(fields: [userId], references: [id])

  userId String @db.ObjectId
}

enum Role {
  STUDENT
  COMPANY
}

enum Tier {
  DIAMOND
  GOLD
  SILVER
  BRONZE
}
